/*
Copyright 2023 The Radius Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

@description('Information about what resource is calling this Recipe. Generated by Radius. For more information visit https://docs.radapp.dev/operations/custom-recipes/')
param context object

@description('The name of the database. Defaults to an empty string.')
param database string = ''

@description('Admin username for the Mongo database. Default is "admin"')
param username string = 'admin'

@description('Admin password for the Mongo database')
@secure()
#disable-next-line secure-parameter-default
param password string = 'Password1234=='

import kubernetes as kubernetes {
  kubeConfig: ''
  namespace: context.runtime.kubernetes.namespace
}

var uniqueName = 'mongo-${uniqueString(context.resource.id)}'
var port = 27017

resource mongo 'apps/Deployment@v1' = {
  metadata: {
    name: uniqueName
  }
  spec: {
    selector: {
      matchLabels: {
        app: 'mongo'
        resource: context.resource.name
      }
    }
    template: {
      metadata: {
        labels: {
          app: 'mongo'
          resource: context.resource.name
          // Label pods with the application name so `rad run` can find the logs.
          'radius.dev/application': context.application == null ? '' : context.application.name
        }
      }
      spec: {
        containers: [
          {
            name: 'mongo'
            image: 'mongo:6.0'
            ports: [
              {
                containerPort: port
              }
            ]
            env: [
              {
                name: 'MONGO_INITDB_ROOT_USERNAME'
                value: username
              }
              {
                name: 'MONGO_INITDB_ROOT_PASSWORD'
                value: password
              }
            ]
          }
        ]
      }
    }
  }
}

resource svc 'core/Service@v1' = {
  metadata: {
    name: uniqueName
    labels: {
      name: uniqueName
    }
  }
  spec: {
    type: 'ClusterIP'
    selector: {
      app: 'mongo'
      resource: context.resource.name
    }
    ports: [
      {
        port: port
      }
    ]
  }
}

output result object = {
  // This workaround is needed because the deployment engine omits Kubernetes resources from its output.
  //
  // Once this gap is addressed, users won't need to do this.
  resources: [
    '/planes/kubernetes/local/namespaces/${svc.metadata.namespace}/providers/core/Service/${svc.metadata.name}'
    '/planes/kubernetes/local/namespaces/${mongo.metadata.namespace}/providers/apps/Deployment/${mongo.metadata.name}'
  ]
  values: {
    host: '${svc.metadata.name}.${svc.metadata.namespace}.svc.cluster.local'
    port: port
    username: username
    database: database
  }
  secrets: {
    // Temporarily workaround until secure outputs are added
    #disable-next-line outputs-should-not-contain-secrets
    connectionString: 'mongodb://${username}:${password}@${svc.metadata.name}.${svc.metadata.namespace}.svc.cluster.local:${port}'
    #disable-next-line outputs-should-not-contain-secrets
    password: password
  }
}
