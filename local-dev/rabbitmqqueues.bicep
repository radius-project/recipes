/*
Copyright 2023 The Radius Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

@description('Information about what resource is calling this Recipe. Generated by Radius. For more information visit https://docs.radapp.dev/operations/custom-recipes/')
param context object

@description('Name of the queue. Defaults to the name of the Radius RabbitMQ resource.')
param queue string = context.resource.name

@description('Tag to pull for the rabbitmq container image.')
param tag string = '3'

@description('Memory request for the rabbitmq deployment.')
param memoryRequest string = '256Mi'

@description('Memory limit for the rabbitmq deployment')
param memoryLimit string = '1024Mi'

extension kubernetes with {
  kubeConfig: ''
  namespace: context.runtime.kubernetes.namespace
} as kubernetes

var uniqueName = 'rabbitmq-${uniqueString(context.resource.id)}'
var port = 5672

var username = 'guest'
var password = 'guest'

resource rabbitmq 'apps/Deployment@v1' = {
  metadata: {
    name: uniqueName
  }
  spec: {
    selector: {
      matchLabels: {
        app: 'rabbitmq'
        resource: context.resource.name
      }
    }
    template: {
      metadata: {
        labels: {
          app: 'rabbitmq'
          resource: context.resource.name
          // Label pods with the application name so `rad run` can find the logs.
          'radapp.io/application': context.application == null ? '' : context.application.name
        }
      }
      spec: {
        containers: [
          {
            name: 'rabbitmq'
            image: 'rabbitmq:${tag}'
            ports: [
              {
                containerPort: port
              }
            ]
            resources: {
              requests: {
                memory: memoryRequest
              }
              limits: {
                memory: memoryLimit
              }
            }
            env: [
              {
                name: 'RABBITMQ_DEFAULT_USER'
                value: username
              }
              {
                name: 'RABBITMQ_DEFAULT_PASS'
                value: password
              }
            ]
          }
        ]
      }
    }
  }
}

resource svc 'core/Service@v1' = {
  metadata: {
    name: uniqueName
    labels: {
      name: uniqueName
    }
  }
  spec: {
    type: 'ClusterIP'
    selector: {
      app: 'rabbitmq'
      resource: context.resource.name
    }
    ports: [
      {
        port: port
      }
    ]
  }
}

output result object = {
  // This workaround is needed because the deployment engine omits Kubernetes resources from its output.
  //
  // Once this gap is addressed, users won't need to do this.
  resources: [
    '/planes/kubernetes/local/namespaces/${svc.metadata.namespace}/providers/core/Service/${svc.metadata.name}'
    '/planes/kubernetes/local/namespaces/${rabbitmq.metadata.namespace}/providers/apps/Deployment/${rabbitmq.metadata.name}'
  ]
  values: {
    queue: queue
    host: '${svc.metadata.name}.${svc.metadata.namespace}.svc.cluster.local'
    port: port
    tls: false
    username: username
  }
  secrets: {
    password: password
  }
}
